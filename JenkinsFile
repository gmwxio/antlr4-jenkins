node {
   stage('benchmark') { // for display purposes
       tool name: 'Go1.8', type: 'go'
       dir('src/github.com/dgraph-io/dgraph') {
           git branch: 'bench-antlr4', url: 'git://192.168.0.16/github.com/dgraph-io/dgraph/.git'
       }
       dir('src/github.com/millergarym/antlr4-go') {
       git branch: 'master', url: 'git://192.168.0.16/github.com/millergarym/antlr4-go/.git'
       }
       env.GOPATH=env.WORKSPACE
       env.GOROOT='/var/jenkins_home/tools/org.jenkinsci.plugins.golang.GolangInstallation/Go1.8'
       withEnv(['PATH+EXTRA=/var/jenkins_home/tools/org.jenkinsci.plugins.golang.GolangInstallation/Go1.8/bin']) {
            sh 'echo "workspace $WORKSPACE"'
            sh 'echo "path $PATH"'
            sh 'echo "gopath $GOPATH"'
            sh 'go env'
            sh 'go get -v github.com/wxio/gobench2plot'
            dir('src/github.com/dgraph-io/dgraph/antlr4go/lexer') {
                // Build the test exec so that later build can get at, run it and compare./
                // Gauges (relative numbers) are better that absolute numbers.
                sh 'go test -c'
                sh './lexer.test -test.run=XXX -test.v  -test.bench . -test.benchmem > ${WORKSPACE}/test.output'
                sh 'cat ${WORKSPACE}/test.output | ${WORKSPACE}/bin/gobench2plot > ${WORKSPACE}/benchmarks.xml'
            }
        }   
        step([$class: 'PlotBuilder', exclZero: false, group: 'Lexer Benchmark', csvFileName: 'plot-lex-time.csv', 
            keepRecords: false, logarithmic: false, numBuilds: '', style: 'line', title: 'Lexer Benchmark Time', useDescr: false, 
            xmlSeries: [[file: 'benchmarks.xml', nodeType: 'NODESET', url: '', xpath: '/Benchmarks/NsPerOp/*']], 
            yaxis: 'NsPerOp', yaxisMaximum: '', yaxisMinimum: ''])
        step([$class: 'PlotBuilder', exclZero: false, group: 'Lexer Benchmark',  csvFileName: 'plot-lex-allocs.csv', 
            keepRecords: false, logarithmic: false, numBuilds: '', style: 'line', title: 'Lexer Benchmark Allocs', useDescr: false, 
            xmlSeries: [[file: 'benchmarks.xml', nodeType: 'NODESET', url: '', xpath: '/Benchmarks/AllocsPerOp/*']], 
            yaxis: 'AllocsPerOp', yaxisMaximum: '', yaxisMinimum: ''])
        step([$class: 'PlotBuilder', exclZero: false, group: 'Lexer Benchmark',  csvFileName: 'plot-lex-memory.csv', 
            keepRecords: false, logarithmic: false, numBuilds: '', style: 'line', title: 'Lexer Benchmark Memory', useDescr: false, 
            xmlSeries: [[file: 'benchmarks.xml', nodeType: 'NODESET', url: '', xpath: '/Benchmarks/AllocsBytesPerOp/*']], 
            yaxis: 'AllocsBytesPerOp', yaxisMaximum: '', yaxisMinimum: ''])


        // step([$class: 'PlotBuilder', csvFileName: 'plot-lex-bench.csv', exclZero: false, group: 'Lexer Benchmark All', 
        //     keepRecords: false, logarithmic: false, numBuilds: '', style: 'line', title: 'Lexer Benchmark Comnined', useDescr: false, 
        //     xmlSeries: [
        //         [file: 'benchmarks.xml', nodeType: 'NODESET', url: '', xpath: '/Benchmarks/NsPerOp/*'], 
        //         [file: 'benchmarks.xml', nodeType: 'NODESET', url: '', xpath: '/Benchmarks/AllocsBytesPerOp/*'], 
        //         [file: 'benchmarks.xml', nodeType: 'NODESET', url: '', xpath: '/Benchmarks/AllocsPerOp/*']], 
        //     yaxis: 'Ns/AllocsBytes/Allocs Per Op (lower better)', yaxisMaximum: '', yaxisMinimum: ''])
    }
//    stage('benchmark-relative') {
//            dir('src/github.com/dgraph-io/dgraph/antlr4go/lexer') {
//                sh 'wget -O lastSuccessfulBuild-lexer.test --auth-no-challenge $JOB_URL/lastSuccessfulBuild/execution/node/3/ws/src/github.com/dgraph-io/dgraph/antlr4go/lexer/lexer.test'
//                sh 'chmod u+x lastSuccessfulBuild-lexer.test'
//                sh './lastSuccessfulBuild-lexer.test -test.run=XXX -test.v  -test.bench . -test.benchmem > ${WORKSPACE}/lastSuccessfulBuild-test.output'
//                // sh '${WORKSPACE}/bin/gobench2plot -gauge lastSuccessfulBuild-test.output test.output > ${WORKSPACE}/benchmark-gauge.xml'
//
//            }
   }
 

}
